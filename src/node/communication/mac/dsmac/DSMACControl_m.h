//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/mac/dsmac/DSMACControl.msg.
//

#ifndef _DSMACCONTROL_M_H_
#define _DSMACCONTROL_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>src/node/communication/mac/dsmac/DSMACControl.msg:13</tt> by nedtool.
 * <pre>
 * enum DSMACCommandDef
 * {
 * 
 *     SET_DUTY_CYCLE = 1;
 *     SET_LISTEN_INTERVAL = 2;
 *     SET_BEACON_INTERVAL_FRACTION = 3;
 *     SET_PROB_TX = 4;
 *     SET_NUM_TX = 5;
 *     SET_RANDOM_TX_OFFSET = 6;
 *     SET_RETX_INTERVAL = 7;
 *     SET_BACKOFF_TYPE = 8;
 *     SET_BACKOFF_BASE_VALUE = 9;
 * }
 * </pre>
 */
enum DSMACCommandDef {
    SET_DUTY_CYCLE = 1,
    SET_LISTEN_INTERVAL = 2,
    SET_BEACON_INTERVAL_FRACTION = 3,
    SET_PROB_TX = 4,
    SET_NUM_TX = 5,
    SET_RANDOM_TX_OFFSET = 6,
    SET_RETX_INTERVAL = 7,
    SET_BACKOFF_TYPE = 8,
    SET_BACKOFF_BASE_VALUE = 9
};

/**
 * Class generated from <tt>src/node/communication/mac/dsmac/DSMACControl.msg:25</tt> by nedtool.
 * <pre>
 * message DSMACControlCommand
 * {
 *     int DSMACCommandKind @enum(DSMACCommandDef);
 *     double parameter = 0;
 * }
 * </pre>
 */
class DSMACControlCommand : public ::cMessage
{
  protected:
    int DSMACCommandKind_var;
    double parameter_var;

  private:
    void copy(const DSMACControlCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DSMACControlCommand&);

  public:
    DSMACControlCommand(const char *name=NULL, int kind=0);
    DSMACControlCommand(const DSMACControlCommand& other);
    virtual ~DSMACControlCommand();
    DSMACControlCommand& operator=(const DSMACControlCommand& other);
    virtual DSMACControlCommand *dup() const {return new DSMACControlCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getDSMACCommandKind() const;
    virtual void setDSMACCommandKind(int DSMACCommandKind);
    virtual double getParameter() const;
    virtual void setParameter(double parameter);
};

inline void doPacking(cCommBuffer *b, DSMACControlCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DSMACControlCommand& obj) {obj.parsimUnpack(b);}


#endif // ifndef _DSMACCONTROL_M_H_

