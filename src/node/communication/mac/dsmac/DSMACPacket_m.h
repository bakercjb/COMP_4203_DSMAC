//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/mac/dsmac/DSMACPacket.msg.
//

#ifndef _DSMACPACKET_M_H_
#define _DSMACPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "MacPacket_m.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/mac/dsmac/DSMACPacket.msg:19</tt> by nedtool.
 * <pre>
 * enum DSMACFrameTypeDef
 * {
 * 
 *     DATA_FRAME = 1;
 *     BEACON_FRAME = 2;
 * }
 * </pre>
 */
enum DSMACFrameTypeDef {
    DATA_FRAME = 1,
    BEACON_FRAME = 2
};

/**
 * Class generated from <tt>src/node/communication/mac/dsmac/DSMACPacket.msg:24</tt> by nedtool.
 * <pre>
 * packet DSMACPacket extends MacPacket
 * {
 *     int frameType @enum(DSMACFrameTypeDef);
 * }
 * </pre>
 */
class DSMACPacket : public ::MacPacket
{
  protected:
    int frameType_var;

  private:
    void copy(const DSMACPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DSMACPacket&);

  public:
    DSMACPacket(const char *name=NULL, int kind=0);
    DSMACPacket(const DSMACPacket& other);
    virtual ~DSMACPacket();
    DSMACPacket& operator=(const DSMACPacket& other);
    virtual DSMACPacket *dup() const {return new DSMACPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getFrameType() const;
    virtual void setFrameType(int frameType);
};

inline void doPacking(cCommBuffer *b, DSMACPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DSMACPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _DSMACPACKET_M_H_

